1. Work for win
2. Glfw through cmake
3. Feng as separate cmake project building like (lib, dylib, interface lib). - chapter 40
4. resources into IDE (shaders, cfg, etc) (maybe 43.4)
5. rewrite helper methods for handling paths new way cmake_path(...) 
6. get rid of globbing


0. Add compiler option to require return value definition.
1. File system;
2. GUID generation;
3. Math lib: Vector2, Vector3, Vector4, Matrix3, Matrix4, Quaternion; Radians <-> Degrees. Left-handed <-> Right-handed
4. Euler <-> Matrix <-> Quaternion;
5. Reflection
6. Serialization
7. Different Graphics API: DirectX, OpenGL, Vulkan, Metal.
8. Common shading language: GLSL, HLSL, metal.
9. Constexpr Vector3. Functions from Unity.
10. clamp optimized.
11. Vector4, Matrix4 functionality (Unity)
12. Add unit tests.
13. math utils.
14. Introduce Compnent/System + Behaviours.
15. Implement Color class.
16. Tempaltes for material/type erasure.
17. Camera frustum culling.
18. How linera filtering is calculated?
19. Performance impact with mip-maps.
20. How mip-maps works? When filtering applied (on which pipeline stage)?
21. Checkered white-black texture on plane for testing mip-maps filtering.
22. glTexImage2D - formats parameters?
23. Visualize light sources: point - cube/sphere, directional - gram, spot - pyramid/cone.
24. Gizmos for light sources.
25. Do local intermediate variables have impact on shader performance?
26. How to combine multiple light sources in shader.
27. all degrees to rad by default.
28. Copy material.
29. Implementations of spot and point light sources.
30. Linera color space vs. non-linear?
31. Texture compression.
32. Implement texture data sharing.
33. Implement mesh data sharing.
34. Complex models, mulitmesh.
35. Implement outlined shader/pass for a single object (for multiple objects).
36. Implement effect like in Death Stranding scaning.
37. "discard" instruction. Only fragment? performance?
38. glBlendFunc(GLenum sfunc, GLenum dfunc);
39. "order independent transparency". depth/transparency conflict.
40. <OpenGL/gl.h> vs./and <OpenGL/gl3.h>
41. glVertexAttribPointer/glEnableVertexAttribArray why every call without VAO.
42. glViewport and renderbuffer different sizes: what result?
43. PostEffects: under water; bag on head; draw depth as posteffect; monochromacity (white-blue);
44. Shader: glass, bottle, surface curvature.
45. Why does image kernels work the way they do? What is empiric? What is the maths?
46. Is frustum culling made automatically by OpenGL?
47. Array textures: what for? usage scenario.
48. Buffer texture what for?
49. Use "shared" uniform block: fetch offsets and total size. 
50. Extra vaiables in uniform block for several shaders. Is it bad?
51. Multisampling in-depth. 