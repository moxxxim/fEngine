1. GLFW lib as IMPORTED
2. No warnings for external projects (AppleClang)
3. Nice thirdparty management (as separate projects with no targets)
4. Feng as separate cmake project building like (lib, dylib, interface lib). - chapter 40
5. resources into IDE (shaders, cfg, etc) (maybe 43.4) 

1. File system;
2. GUID generation;
3. Math lib: Vector2, Vector3, Vector4, Matrix3, Matrix4, Quaternion; Radians <-> Degrees. Left-handed <-> Right-handed
4. Euler <-> Matrix <-> Quaternion;
5. Reflection
6. Serialization
7. Different Graphics API: DirectX, OpenGL, Vulkan, Metal.
8. Common shading language: GLSL, HLSL, metal.
9. Constexpr Vector3. Functions from Unity.
10. clamp optimized.
11. Vector4, Matrix4 functionality (Unity)
12. Add unit tests.
13. math utils.
14. Introduce Compnent/System + Behaviours.
15. Implement Color class.
16. Tempaltes for material/type erasure.
17. Camera frustum culling.
19. Performance impact with mip-maps.
21. Checkered white-black texture on plane for testing mip-maps filtering.
23. Visualize light sources: point - cube/sphere, directional - gram, spot - pyramid/cone.
24. Gizmos for light sources.
28. Copy material.
31. Texture compression.
32. Implement texture data sharing.
33. Implement mesh data sharing.
34. Complex models, mulitmesh.
35. Implement outlined shader/pass for a single object (for multiple objects).
36. Implement effect like in Death Stranding scaning.
37. "discard" instruction. Only fragment? performance?
39. "order independent transparency". depth/transparency conflict.
41. glVertexAttribPointer/glEnableVertexAttribArray why every call without VAO.
42. glViewport and renderbuffer different sizes: what result?
43. PostEffects: under water; bag on head; draw depth as posteffect; monochromacity (white-blue);
44. Shader: glass, bottle, surface curvature.
48. Buffer texture what for?
49. Use "shared" uniform block: fetch offsets and total size. 
50. Extra vaiables in uniform block for several shaders. Is it bad?